GIT 

    sintaxis:
        git init ==> inicia git, crea un repositorio
        git add archivo ==> abre y vincula archivo, le dice que existe
        git commit -m "version archivo" ==> guarda cambios en version
        git add . ==> vincula todos los archivos que hayan cambiado
        git commit -am "comentario" ==> add y commit juntos
            //solo en archivos ya pasados por commit//
        git status ==> muestra status, si falta agregar un cambio por ejemplo
        git show ==> muestra todos los ulyimos cambios hechos
        git log archivo ==> muestra todo lo hecho con archivo
        git log --stat ==> cambios hasta con bytes
        code ==> abre VisualStudioCode c:
        git diff ==> ultimos cambios realizados
        git diff commit_code_1 commit_code_2 ==> diferencias entre ambas versiones
    
    directory -------- staging -------- repository
        - git init crea staging (ram) y crea repository (/.git/)
        - en /.git/ se guardan los cambios finales
        - una vez modificado el archivo ==>
            ==> lo agrego al staging (git add archivo)
        - una vez ahi puedo agregar mas o removerlo del staging
        - git rm archivo ==> remueve archivo de staging
            git rm --cached archivo ==> remueve de staging
            git rm --force ==> borra todo
        - para enviar archivo a repositorio ==>
            ==> git commit -m "mensaje"
        - nombre del repositorio es "master" donde se guardan todos los cambios
        - estados:
            untraked -------- traked --------none/saved
        - para traer de vuelta cambios se usa checkout
        - cada commit es una nueva version del archivo 

    ramas:
        master -------- experimentos -------- bugfixing
        merge ==> unir cambios de una rama con otra
        crear otra rama es copiar ultimo commit en otra área
        git branch "nombre_rama" ==> crea rama
        git checkout rama ==> me dirijo a rama
        los cambios en una rama solo se guardan en esa rama
        al hacer merge la nueva rama desaparece en master
        git branch ==> nombra las ramas existentes
        (master) git merge (rama) ==> fusiona sobre master borrando rama

    traer de vuelta cambios:
        git reset id_acrchivo --hard ==> trae de vuelta el archivo con esa id
            //borra todos los log descartados//
        git reset id_acrchivo --soft ==> mantiene en staging los cambios que hayan
        git reset HEAD ==> saca los archivos del staging
        para ver una versión de un archivo ==>
            git checkout id_acrchivo archivo, lo modifica
                //no hacer commit//
        y para devolverlo a la ultima version ==>
            git checkout master archivo.. y todo ok

    git online:
        git clone url ==> trae los archivos y commits desde url
        add,commit + git push ==> envia ultimos commits a url
        git fetch ==> trae actualizaciones a repositorio, pero no archivos
        git merge ==> clona los archivos actualizados
        git pull ==> fetch+merge, trae copia actualizada

    resolucion de conflictos al merge:
        si modifico las mismas lineas en 2 ramas y las uno al hacer
        merge git arroja un eror
        la sixtaxis de un conflicto en texto es ==>
            ==> <<<rama1
            ==> ---
            ==> >>>rama2
            y ante eso yo elijo cual en VSCode c:

    GitHub:
        git remote add origin github_url ==> sube mi repositorio a GitHub
        git remote ==> muestra mi origin
        git remote -v ==> muestra tambien que puedo hacer push y fetch
        git push origin master ==> envia master a origin
        git pull origin master --allow-unrelated-histories ==>
            ==> soluciona error de historias commit no relacionadas

    Llaves git-GitHub:
        las llaves son por persona, se crea en home/
        es el medio webeo... pero uno por pc, afortunadamente :L

    Especialidad de git log:
        git log --all --graph ==> muestra todos los commits con rayas
        git log --all --graph --decorate --oneline ==> una belleza
    
    Alias: 
        alias apodo_comando "comando" ==> escribiendo apodo_comando se ejecuta comando
    
    TAGs:
        para tener visualente claro que versió es cada commit
        git tag -a vNN(números) -m "version blabla" id_commit ==> etiqueto la version del archivo
        git tag ==> muestra los tags 
        git show-ref --tags ==> lo mismo con mucho mas detalle
        git push origin --tags ==> envia tags a origin
        es muy util para etiquetar claramente en GitHub
        git tag -d vNN ==> elimina tag vNN
            ==> volver a hacer pull y push_tag (buena practica y necesario)
        git push origin :refs/tags/vNN ==> elimina referencia a tag en origin
    
    GitHub ramas:
        gitk ==> un log muuuuy visual e intuitivo con mucho detalle
        Escenario:
            soy nuevo y quiero bajar un repositorio online
            git clone repository_url ==> baje el repositorio y se puede
                hacer pull y push
        desde github se debe agregar usuario para que pueda editar:
        github/repository_settings/collaborators/--agregar correo c:
            o username si el correo es privado
    
    Pull request:
        estado intermedio antes de enviar un merge a la rama de pruebas
        solo github tiene pull request
        
        
